package engine.gui.widgets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

import javax.swing.Timer;

import org.newdawn.slick.Graphics;
import org.newdawn.slick.Image;
import org.newdawn.slick.TrueTypeFont;

import engine.Config;
import engine.gui.EventActionType;
import engine.gui.GuiEvent;
import engine.gui.GuiListener;


public class Button implements Widget {
	
	private String id;
	private EventActionType eat;
	
	private String text;
	private String textId;
	private int x;
	private int y;
	private int width;
	private int height;
	//private BitmapFont font;
	
	private int buttonState;
	
	private Image texture_button;
	private Image texture_button_active;
	private Image texture_button_pressed;
	
	private List<GuiListener> listenerList;	
	
	private Timer clickedTimer;
	
	/*
	 * Constructor with default width and height
	 */
	public Button(String id, EventActionType eat, int x, int y, String text, String textId) {
		this.id = id;
		this.textId = textId;
		this.eat = eat;
		this.x = x;
		this.y = y;		
		this.text = text;		
		
		this.buttonState = 1;
		
		this.texture_button = Config.getTextureManager().getTextureByKey("texButton");
		this.texture_button_active = Config.getTextureManager().getTextureByKey("texButtonActive");
		this.texture_button_pressed = Config.getTextureManager().getTextureByKey("texButtonPressed");
		
		this.width = texture_button.getWidth();
		this.height = texture_button.getHeight();
		
		this.listenerList = new ArrayList<GuiListener>();
	}
	
	/*
	 * Constructor with specified width and height
	 */
	public Button(String id, EventActionType eat, int x, int y, int width, int height, String text, String textId) {
		this.id = id;
		this.textId = textId;
		this.eat = eat;
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
		this.text = text;		
		
		this.buttonState = 1;
		
		this.texture_button = Config.getTextureManager().getTextureByKey("texButton");
		this.texture_button_active = Config.getTextureManager().getTextureByKey("texButtonActive");
		this.texture_button_pressed = Config.getTextureManager().getTextureByKey("texButtonPressed");
		
		this.listenerList = new ArrayList<GuiListener>();
	}
	
	/*
	 * Constructor with specified width and height and textures
	 */
	public Button(String id, EventActionType eat, int x, int y, int width, int height, 
			Image texture_button, Image texture_button_active, Image texture_button_pressed, String text, String textId) {
		this.id = id;
		this.textId = textId;
		this.eat = eat;
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
		this.text = text;		
		
		this.buttonState = 1;
		
		this.texture_button = texture_button;
		this.texture_button_active = texture_button_active;
		this.texture_button_pressed = texture_button_pressed;
		
		this.listenerList = new ArrayList<GuiListener>();
	}
	
	public void setId(String id) {
		this.id = id;
	}
	
	public String getTextId() {
		return textId;
	}
	
	public void setTextId(String textId) {
		this.textId = textId;
	}
	
	public void setText(String text) {
		this.text = text;
	}
	
	public String getText() {
		return text;
	}
	
	public void setX(int x) {
		this.x = x ;
	}
	
	public int getX() {
		return x;
	}
	
	public void setY(int y) {
		this.y = y;
	}
	
	public int getY() {
		return y;
	}
	
	public WidgetType getType() {
		return WidgetType.BUTTON;
	}	
		
	public void draw(Graphics g) {
		switch(buttonState) {
		case 1:
			texture_button.draw(x,y);
			break;
		case 2:
			texture_button_active.draw(x,y);
			break;
		case 3:
			texture_button_pressed.draw(x,y);
			break;
		}
		
		
		TrueTypeFont ttf = Config.getCurrentFont();
		int textWidth = ttf.getWidth(text);
		int textHeight = ttf.getHeight(text);
		g.setFont(ttf);	//TODO: It's probably ok to set this only once in the engine core.
		g.drawString(text, x + (width/2) - textWidth/2, y + height/2 - textHeight/2);	
	}
	
	/**
	 * Adds a listener object to the list of listener objects this class has. 
	 * All gui events generated by this class will be passed to this listener.
	 * 
	 * @param ml The listener class 
	 */
	public synchronized void addGuiListener(GuiListener gl) {
		listenerList.add(gl);
	}
	
	/**
	 * Informs all listener objects about any gui event that just happened.
	 */
	private synchronized void informListeners() {
		GuiEvent ge = new GuiEvent(this, id, textId, eat);
		for(GuiListener gl : listenerList) {
			gl.eventReceived(ge);
		}		
	}
	
	/**
	 * Checks if the mouse is currently over the button.
	 * 
	 * @param mouseX The current mouse x position
	 * @param mouseY The current mouse y position
	 * @return
	 */
	public boolean hasFocus(int mouseX, int mouseY) {
				
		if(mouseX > x && mouseX < x + texture_button.getWidth()) {
			if(mouseY > y && mouseY < y + texture_button.getHeight()) {
				return true;
			}
		}	
		
		return false;		
	}	
	
	/**
	 * Checks if this button was clicked. If so, we inform our listeners and change the button state. The button state will be kept active
	 * for a certain time.
	 * 
	 * @param mouseX The horizontal mouse position
	 * @param mouseY The vertical mouse position
	 * 
	 * @return true if clicked
	 */
	public boolean gotClicked(int mouseX, int mouseY) {
		if(hasFocus(mouseX, mouseY)) {			

			buttonState = 3;
			clickedTimer = new Timer(100, new ActionListener() {	
				@Override
				public void actionPerformed(ActionEvent e) {					
					buttonState = 1;
					clickedTimer.stop();
				}
			});
			clickedTimer.start();
			
			// Inform our listeners that we got clicked
			informListeners();
			
			return true;
		}
		
		return false;
	}
	
	/**
	 * Checks if the mouse cursor is currently over this button. The button state will be changed appropriately.
	 * 
	 * @param mouseX The horizontal mouse position
	 * @param mouseY The vertical mouse position
	 */
	public void isMouseOver(int mouseX, int mouseY) {
		// If the button state equals 3 (means clicked), then don't change the state back to the mouseover or mouseout button state. The timer
		// initiated in the 'gotClicked' method will make sure button state 3 will pass.
		if(buttonState != 3) {
			if(hasFocus(mouseX, mouseY)) {
				buttonState = 2;
			} else {
				buttonState = 1;
			}
		}
	}

}